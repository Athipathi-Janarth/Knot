/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.BakerPanel;

import Business.EcoSystem;
import Employee.Employee;
import Enterprise.Enterprise;
import Model.MenuItem.BakeryMenuItem;
import Model.Menus.BakeryMenu;
import Models.Organization.Bakery;
import Models.Organization.Organization;
import Network.Network;
import ui.SystemAdmin.*;
import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.io.File;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import ui.StylistPanel.stylistItemsPanel;

/**
 *
 * @author vikashsingh
 */
public class bakerItemsPanel extends javax.swing.JPanel {

    /**
     * Creates new form networkPanel
     */
    
   EcoSystem system;
   Organization org;
   Employee employee;
   Bakery bakery;
   public String photoPath;
    
    public bakerItemsPanel(EcoSystem system, Employee employee) {
        initComponents();
        this.system = system;
        this.employee = employee;
        System.out.println("Baker items panel");
        adminPanelCard.setBackground(new Color(0,0,0,90));
        bakery = getBakery(employee.getOrgId());
       ItemsTable.getColumn("Image").setCellRenderer(new bakerItemsPanel.CellRenderer());
        populateTable(bakery.getMenu());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        adminPanelCard = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ItemsTable = new javax.swing.JTable();
        btnCreateCake = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        ItemName = new javax.swing.JLabel();
        cakeName = new javax.swing.JTextField();
        FlavourLabel = new javax.swing.JLabel();
        flavourValue = new javax.swing.JTextField();
        ServesLabel = new javax.swing.JLabel();
        serveValue = new javax.swing.JTextField();
        priceLabel = new javax.swing.JLabel();
        PriceValue = new javax.swing.JTextField();
        ImageLabel = new javax.swing.JLabel();
        cakeImg = new javax.swing.JLabel();
        photo = new javax.swing.JLabel();
        Update = new javax.swing.JButton();
        adminBackgroundImg = new javax.swing.JLabel();

        setSize(new java.awt.Dimension(977, 630));
        setLayout(null);

        ItemsTable.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        ItemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Item", "Flavour", "Server", "Price", "Image", "menuItemObject"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        ItemsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ItemsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ItemsTable);
        if (ItemsTable.getColumnModel().getColumnCount() > 0) {
            ItemsTable.getColumnModel().getColumn(5).setMinWidth(0);
            ItemsTable.getColumnModel().getColumn(5).setPreferredWidth(0);
            ItemsTable.getColumnModel().getColumn(5).setMaxWidth(0);
        }

        btnCreateCake.setText("Add Item");
        btnCreateCake.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateCakeActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDeleteMouseClicked(evt);
            }
        });
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        ItemName.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        ItemName.setForeground(new java.awt.Color(255, 255, 255));
        ItemName.setText("Item Name");

        cakeName.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N

        FlavourLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        FlavourLabel.setForeground(new java.awt.Color(255, 255, 255));
        FlavourLabel.setText("Flavour");

        flavourValue.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N

        ServesLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        ServesLabel.setForeground(new java.awt.Color(255, 255, 255));
        ServesLabel.setText("Serves");

        serveValue.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N

        priceLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        priceLabel.setForeground(new java.awt.Color(255, 255, 255));
        priceLabel.setText("Price");

        PriceValue.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N

        ImageLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        ImageLabel.setForeground(new java.awt.Color(255, 255, 255));
        ImageLabel.setText("Image");

        photo.setText("+ Add photo");
        photo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                photoMouseClicked(evt);
            }
        });

        Update.setText("Update");
        Update.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UpdateMouseClicked(evt);
            }
        });
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout adminPanelCardLayout = new javax.swing.GroupLayout(adminPanelCard);
        adminPanelCard.setLayout(adminPanelCardLayout);
        adminPanelCardLayout.setHorizontalGroup(
            adminPanelCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminPanelCardLayout.createSequentialGroup()
                .addGroup(adminPanelCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(adminPanelCardLayout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addGroup(adminPanelCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 820, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(adminPanelCardLayout.createSequentialGroup()
                                .addGroup(adminPanelCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(adminPanelCardLayout.createSequentialGroup()
                                        .addComponent(FlavourLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(cakeName, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(adminPanelCardLayout.createSequentialGroup()
                                        .addComponent(ItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(flavourValue, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(adminPanelCardLayout.createSequentialGroup()
                                        .addComponent(ServesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(serveValue, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(adminPanelCardLayout.createSequentialGroup()
                                        .addComponent(priceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(PriceValue, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(adminPanelCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(photo, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cakeImg, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(adminPanelCardLayout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addComponent(btnCreateCake, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(120, 120, 120)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(115, 115, 115)
                        .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(185, Short.MAX_VALUE))
        );
        adminPanelCardLayout.setVerticalGroup(
            adminPanelCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminPanelCardLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(adminPanelCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(adminPanelCardLayout.createSequentialGroup()
                        .addGroup(adminPanelCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(adminPanelCardLayout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addComponent(ImageLabel))
                            .addGroup(adminPanelCardLayout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addGroup(adminPanelCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cakeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(FlavourLabel))))
                        .addGap(4, 4, 4)
                        .addGroup(adminPanelCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(photo, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(adminPanelCardLayout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addGroup(adminPanelCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ItemName)
                                    .addComponent(flavourValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(55, 55, 55)
                                .addGroup(adminPanelCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ServesLabel)
                                    .addComponent(serveValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(55, 55, 55)
                        .addGroup(adminPanelCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(priceLabel)
                            .addComponent(PriceValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(adminPanelCardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCreateCake, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(adminPanelCardLayout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(cakeImg, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(60, Short.MAX_VALUE))
        );

        add(adminPanelCard);
        adminPanelCard.setBounds(0, 0, 1090, 630);

        adminBackgroundImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/weddingcake.jpeg"))); // NOI18N
        add(adminBackgroundImg);
        adminBackgroundImg.setBounds(0, 0, 1090, 630);
    }// </editor-fold>//GEN-END:initComponents

    
//    private Organization getOrganization (long orgId, EcoSystem system){
//       System.out.println("Searching for org "+ orgId);
//       Network network = system.retriveNetwork(employee.getNetworkname());
//       Organization organisation = null;
//       for(int i=0;i< network.getEnterpriseDirectory().getEnterpriseList().size(); i++){
//           Enterprise enterprise = network.getEnterpriseDirectory().getEnterpriseList().get(i);
//           for (Organization organization : enterprise.getOrganizationList().getOrganizationList()) {
//               if(organization.getId() == orgId){
//                   System.out.println("organization Found " + organization.getId() + " "+ organization.getName());
//                   organisation=organization;
//
//               }
//           }
//       }
//       return organisation;
//    }
    
    private Bakery getBakery(long orgId){
       Network network = system.retriveNetwork(employee.getNetworkname());
        Bakery currentBakery=null;
        ArrayList<Bakery> bakeries = network.getBakeryDirectory().getBakeries();
        System.out.println("bakeries size "+ bakeries.size());
        
        for(int i=0; i < bakeries.size();i++){
             System.out.println("bakery id " + bakeries.get(i).getId());
            if(bakeries.get(i).getId() == orgId ){
                System.out.println("bakery found");
                currentBakery= bakeries.get(i);
                System.out.println(currentBakery.getName());
            }
        }
       
       return currentBakery;
    }
    
    
    private void btnCreateCakeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateCakeActionPerformed
        String name = cakeName.getText().trim();
        String flavour = flavourValue.getText().trim();
        int serves =  Integer.valueOf(serveValue.getText().trim());
        float price = Float.valueOf(PriceValue.getText().trim());
        System.out.println(name +" "+ flavour+  " "+serves + " "+ price);
        System.out.println(employee.getOrgId());
        bakery.getMenu().addBakeryMenuItem(new BakeryMenuItem(flavour, serves,photoPath, name,bakery.getMenu().getMenuItemId(),price));
        populateTable(bakery.getMenu());
        resetForm();
    }//GEN-LAST:event_btnCreateCakeActionPerformed

    private void ItemsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ItemsTableMouseClicked
        int selectedRowIndex = ItemsTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) ItemsTable.getModel();
        BakeryMenuItem menuitem = (BakeryMenuItem) model.getValueAt(selectedRowIndex, 5); 
        System.out.println(menuitem.getId());
        cakeName.setText(menuitem.getItemName());
        flavourValue.setText(menuitem.getFlavour());
        serveValue.setText( Integer.toString(menuitem.getServes()));
        PriceValue.setText(Float.toString(menuitem.getPrice()));
    }//GEN-LAST:event_ItemsTableMouseClicked

    
    
    public ImageIcon ResizeImage(String ImagePath) {
        ImageIcon MyImage = new ImageIcon(ImagePath);
        Image img = MyImage.getImage();
        Image newImg = img.getScaledInstance(photo.getWidth(), photo.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(newImg);
        return image;
    }
    public ImageIcon ResizeImageTable(String ImagePath) {
        ImageIcon MyImage = new ImageIcon(ImagePath);
        Image img = MyImage.getImage();
        Image newImg = img.getScaledInstance(60, 60, Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(newImg);
        return image;
    }
    
    private void btnDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteMouseClicked
        int selectedRowIndex = ItemsTable.getSelectedRow();
        
        if(selectedRowIndex<0)
        {
            JOptionPane.showMessageDialog(this, "Select a item to delete it.");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) ItemsTable.getModel();
        BakeryMenuItem menuitem = (BakeryMenuItem) model.getValueAt(selectedRowIndex, 5);
        bakery.getMenu().getBakeryMenu().remove(menuitem);
        resetForm();
        populateTable(bakery.getMenu());
    }//GEN-LAST:event_btnDeleteMouseClicked

    private void photoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_photoMouseClicked
        JFileChooser file = new JFileChooser();
        file.setCurrentDirectory(new File(System.getProperty("user.home")));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.Images", "jpg", "gif", "png");
        file.addChoosableFileFilter(filter);
        int result = file.showSaveDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = file.getSelectedFile();
            String path = selectedFile.getAbsolutePath();
            photoPath = path;
            photo.setIcon(ResizeImage(path));
        } else if (result == JFileChooser.CANCEL_OPTION) {
            System.out.println("No File Select");
        }
    }//GEN-LAST:event_photoMouseClicked

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = ItemsTable.getSelectedRow();
        
        if(selectedRowIndex<0)
        {
            JOptionPane.showMessageDialog(this, "Select a item to delete it.");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) ItemsTable.getModel();
        BakeryMenuItem menuitem = (BakeryMenuItem) model.getValueAt(selectedRowIndex, 5);
        bakery.getMenu().getBakeryMenu().remove(menuitem);
        resetForm();
        populateTable(bakery.getMenu());
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        int selectedRowIndex = ItemsTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) ItemsTable.getModel();
        BakeryMenuItem menuitem = (BakeryMenuItem) model.getValueAt(selectedRowIndex, 5); 
        String name = cakeName.getText().trim();
        String flavour = flavourValue.getText().trim();
        int serves =  Integer.valueOf(serveValue.getText().trim());
        float price = Float.valueOf(PriceValue.getText().trim());
        System.out.println(name +" "+ flavour+  " "+serves + " "+ price);
        System.out.println(employee.getOrgId());
        bakery.getMenu().updateMenuItem(new BakeryMenuItem(flavour, serves,photoPath, name,menuitem.getId(),price));
        populateTable(bakery.getMenu());
        resetForm();
    }//GEN-LAST:event_UpdateActionPerformed

    private void UpdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UpdateMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_UpdateMouseClicked


    private void resetForm() {
        cakeName.setText("");
        flavourValue.setText("");
        serveValue.setText("");
        PriceValue.setText("");
        photo.setIcon(null);
    }
    
    private void populateTable(BakeryMenu menu){
        System.out.print("Bakery menu ");
        System.out.print(menu);
        DefaultTableModel model = (DefaultTableModel) ItemsTable.getModel();
        model.setRowCount(0);
        for(int i=0;i< menu.getBakeryMenu().size();i++){
            BakeryMenuItem menuItem = menu.getBakeryMenu().get(i);
            javax.swing.JLabel photo2;
            photo2=new JLabel();
            photo2.setIcon(ResizeImageTable(menuItem.getPhoto()));
            model.addRow(new Object[]{
              menuItem.getItemName(),
              menuItem.getFlavour(),
              menuItem.getServes(),
              menuItem.getPrice(),
              photo2,
              menuItem
            });
        }
    }
    class CellRenderer implements TableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table,
                Object value,
                boolean isSelected,
                boolean hasFocus,
                int row,
                int column) {

            TableColumn tb = ItemsTable.getColumn("Image");
            tb.setMaxWidth(60);
            tb.setMinWidth(60);

            ItemsTable.setRowHeight(60);

            return (Component) value;
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel FlavourLabel;
    private javax.swing.JLabel ImageLabel;
    private javax.swing.JLabel ItemName;
    private javax.swing.JTable ItemsTable;
    private javax.swing.JTextField PriceValue;
    private javax.swing.JLabel ServesLabel;
    private javax.swing.JButton Update;
    private javax.swing.JLabel adminBackgroundImg;
    private javax.swing.JPanel adminPanelCard;
    private javax.swing.JButton btnCreateCake;
    private javax.swing.JButton btnDelete;
    private javax.swing.JLabel cakeImg;
    private javax.swing.JTextField cakeName;
    private javax.swing.JTextField flavourValue;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel photo;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JTextField serveValue;
    // End of variables declaration//GEN-END:variables
}
